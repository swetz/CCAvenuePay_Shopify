require 'test_helper'

class SagePayFormNotificationTest < Test::Unit::TestCase
  include ActiveMerchant::Billing::Integrations

  def setup
    @options = {:credential2 => 'EncryptionKey123'}
  end

  def test_successful_purchase
    n = SagePayForm::Notification.new(successful_purchase, @options)
    assert n.complete?
    assert_false n.cancelled?

    assert_equal 'Completed', n.status
    assert_equal 'OK', n.status_code
    assert_equal 'Successfully Authorised Transaction', n.message
    assert_equal '28', n.item_id
    assert_equal '{2D370B0B-692D-4D07-B616-91B86CCDF85A}', n.transaction_id
    assert_equal '7349', n.auth_id
    assert_equal '1231.47', n.gross
    assert_equal 'ALL MATCH', n.avs_cv2_result
    assert_equal 'MATCHED', n.address_result
    assert_equal 'MATCHED', n.post_code_result
    assert_equal 'MATCHED', n.cv2_result
    assert_equal 'OK', n.buyer_auth_result
    assert_equal 'MNG8ZAJDJRUKW90GGYZNTH', n.buyer_auth_result_code
    assert_equal 'VISA', n.credit_card_type
    assert_equal '8356', n.credit_card_last_4_digits

    assert_false n.gift_aid?
    assert_false n.payer_verified?
    assert_false n.test?

    assert_nil n.address_status
    assert_nil n.currency
  end

  def test_failed_purchase
    n = SagePayForm::Notification.new(failed_purchase, @options)
    assert_false n.complete?
    assert_false n.cancelled?

    assert_equal 'Failed', n.status
    assert_equal 'NOTAUTHED', n.status_code
    assert_equal 'NOTAUTHED message generated by Simulator', n.message
    assert_equal '28', n.item_id
    assert_equal '{2D370B0B-692D-4D07-B616-91B86CCDF85A}', n.transaction_id
    assert_equal '31.47', n.gross
    assert_equal 'ALL MATCH', n.avs_cv2_result
    assert_equal 'MATCHED', n.address_result
    assert_equal 'MATCHED', n.post_code_result
    assert_equal 'MATCHED', n.cv2_result
    assert_equal 'OK', n.buyer_auth_result
    assert_equal 'MNVJYYXXHMCNH0BOTBT97Z', n.buyer_auth_result_code
    assert_equal 'VISA', n.credit_card_type
    assert_equal '4353', n.credit_card_last_4_digits

    assert_false n.gift_aid?
    assert_false n.payer_verified?
    assert_false n.test?

    assert_nil n.auth_id
    assert_nil n.address_status
    assert_nil n.currency
  end

  def test_cancelled_purchase
    n = SagePayForm::Notification.new(cancelled_purchase, @options)
    assert_false n.complete?
    assert n.cancelled?

    assert_equal 'Failed', n.status
    assert_equal 'ABORT', n.status_code
    assert_equal 'ABORT message generated by Simulator', n.message
    assert_equal '5', n.item_id
    assert_equal '{90A42BA2-1281-4CA9-8E84-E43C0E7FD85F}', n.transaction_id
    assert_equal '148.99', n.gross
    assert_equal 'ALL MATCH', n.avs_cv2_result
    assert_equal 'MATCHED', n.address_result
    assert_equal 'MATCHED', n.post_code_result
    assert_equal 'MATCHED', n.cv2_result
    assert_equal 'OK', n.buyer_auth_result
    assert_equal 'MNJ8W58FNX1Q5OAV4TZKW2', n.buyer_auth_result_code
    assert_equal 'VISA', n.credit_card_type
    assert_equal '6425', n.credit_card_last_4_digits

    assert_false n.gift_aid?
    assert_false n.payer_verified?
    assert_false n.test?

    assert_nil n.auth_id
    assert_nil n.address_status
    assert_nil n.currency
  end

  def test_compositions
    n = SagePayForm::Notification.new(successful_purchase, @options)
    assert_equal Money.new(123147, nil), n.amount
  end

  def test_bogus_crypt
    assert_raises SagePayForm::Notification::InvalidCryptData do
      SagePayForm::Notification.new('crypt=SomeInvalidCryptField', @options)
    end
  end

  def test_missing_crypt
    assert_raises SagePayForm::Notification::MissingCryptData do
      SagePayForm::Notification.new('other=stuff', @options)
    end
  end

  def test_missing_key
    assert_raises SagePayForm::Notification::MissingCryptKey do
      SagePayForm::Notification.new(successful_purchase, {})
    end
  end

  private

  def successful_purchase
    'utm_nooverride=1&crypt=@BE1F6226E7478FACFA239E0F882B10E7BAE1149909C1F8D163038E623A188E693C6CFC594A49D5BB257E2CBBA58D3436A6FED00FCD7268FB9D0978CEEE3086A8B25F92FF65F059886A07BFE7E228AA965F44B9018AD73612BA2FFDFD3A2A468B88E4E77D81252B3F28173E9DCD5559D5A89937BBB88AE8FE358FE89974FC4761172694ADEAD7671F07BCECB3552F285F78C30F8DF830494429777F91B58344FDE411794FD64F215EC8ED395FB621958D4241EA41B08C7F5FDC3302C8B75BC92E55FABA6126CE1B27E9B1A01CD6F03BF99051D67A0829E2AF3C22E6159D2D5551D499A3677C695E50C3000EFFDA15102987BFF0329BEB8FED280D343723C47EF2A4475835AABBE1980560356E3D9F0F84562E8739EAC4E859F72E4FBEBB5C3830099E2908B433318FD1B3905244AD5CAB4CE8120D33D39391CF4E9F0E4CC9C62B'
  end

  def failed_purchase
    'utm_nooverride=1&crypt=@A60BFC79F8FAA1C02E548AD3D3D2EC888C6FF1DA74889EB45D6ED7D680CC45087A449B3E3E8727AA90AC451C0B3AC0D61F3761F3269EFEA8276DF568905DA1EFB19EE7526DA4EDC894C29A1D1D92831C22C1BC0614B86C6C6262ED29F5E8178BD80C1D9389A4B7A78305A625D49522E19C6D623C28CF34D9F87E4607F2D361894B344037120F745BC267E055762D7BD642847647FA98E6573245AFD125C2212319499D7C332893DF2E9EB085C6F58D7FD34665AC5365F46FEE276E3D17615C3FA97ACB335045BF79B6F2F612FED564587EC52CBAA558D910209ACD88E5859F6EA0FD4FC7160CD4D68E3E6B8894737708AB212A2E33CE22EB245E117AFCE6F7B29A51E903BE9209E6EA8E3C9C543F85F4A9F3109A464A0BE85FE7706BC24F7F257BE9C2D54FE46E3B382F726B53E9876D292ACB76931AA2ACD0EED18766D2D142'
  end

  def cancelled_purchase
    'utm_nooverride=1&crypt=@F2039156479BC99C3448EB6CDAAD52E1746785AAB0B7477467FD9F4F84AC52EC981DA7105EAE3FA281648ADA29F2E2874A0B49C5D35159CB1B191A0FF1CEF68F4C1D06BDE7AAEC9356585210B013872790D12172726FFBD443E0F31925275DA6BCBAA198349D79828DE210088D1621E512272B4D325B35B12FFF931CBDE601E47F8F21FE7F0E9CE20069CB156AAB61C595D97190EBEEA1160524A0E557360C3C606909C0B01F0FEA252489AB873299DD427F21AAA14304886219E4AD16E2A288A16063CC058543619D7B80F283595B9AD3DBF9D27DB4E4631900AFDECABC45D899D5A12689104B6B76C1F119939D26BD4160074A46517A97194C8C3C882D901F28417FA5CE3BBC9B11D220E0CCE4E07BB3EDE72ECEEF7B5EA1E56EA3C1EE77F37479A226A9A1ADB91B0F4AC405C94F37CACA147939FC317FA0BE799140B149B7'
  end
end
